"post_date","post_content","post_title","post_name","guid"
"11/11/2014 22:27:12","Starting with Rails, ive noticed that the migrations dont create foreign keys in a InnoDB setting voor MySql. So i did some research.

For some reason Rails doesnt pay to much attention to the foreign keys, this because ActiveRecord is an excelent ORM and doens't need to be monitored by constraints in the DB itself. That being said.... i want it.

So i found a nice litte gem that fixes this for you.

Take a look!

EDIT: This Gem has been included in Rails 4.2.0 YaY!!","Gem - Foreigner ( foreign keys to migrations )","foreigner","http://www.weteling.com/wp/wp-content/uploads/2014/11/Art10_2.jpg"
"12/11/2014 21:40:52","The myth that Rails is slow, this is maybe one of the biggest misassumptions that have steered me away from rails for over 4 years. Really hating that discussion at the moment.

I really don't find this to be the case, in fact i find it to be quite fast. The definition about speed in almost all benchmarks don't apply for default web development if you ask me.

Yes rails is slow if your crunching big-data, Yes rails is slow if your doing 1000 thins before showing user content.....
<em>
<strong>BUT THATS NOT WEBDEVELOPEMT!!!</strong></em>

Web development usually implements the MVC principle in this order. The Actor ( you at your computer ) opens a webpage. The system asks what data from the models ( database ) in the controller the data is ordered, or some simple CRUD actions, than the data is passed to the View what will return the HTML in most cases, than the Controller returns the HTML with the appropriate headers.

<strong>This is 95% of all webpages on the web. </strong>

So why would i want to boot up a big framework in PHP ( lets take Laravel 4.2 )  that takes about 60 to 30ms ( depending on your config and server ) and than run a ""faster"" script for 2ms, giving me a total of 32ms??

Doing the actions as described above in Rails 4.1 gave me responses within 12ms. And its not even tuned yet. So if you have application code that in ruby takes maybe 15% longer, its still a heck of allot faster than booting a big PHP framework.

Further more the development time is a heck of allot shorter in Rails compared to whatever. Rails programmers tend to write test, have code that is robust etc.

I wish i knew this 4 year ago.","Rails is slow?","rails-is-slow","http://www.weteling.com/wp/wp-content/uploads/2014/12/formation-ruby1.png"
"12/20/2014 13:36:54","A web consultancy who know how to get things done, they have bundled all there knowledge into a playbook, a manual for new employees. Really insightful!

http://playbook.thoughtbot.com/","Toughtbot","toughtbot","http://www.weteling.com/wp/wp-content/uploads/2014/12/Screen-Shot-2015-02-01-at-11.15.55.png"
"12/20/2014 13:37:28","Still need to play with: https://greensock.com/","Greensock","greensock","http://www.weteling.com/wp/wp-content/uploads/2014/12/Screen-Shot-2015-02-01-at-11.13.38.png"
"12/20/2014 13:38:46","Middle man is a rapid prototype lib ( for as far as i know ) that seems to be super for rails projects. Need to tinker with this one to!

http://middlemanapp.com/","Find out how middleman can help me","find-out-how-middleman-can-help-me","http://www.weteling.com/wp/wp-content/uploads/2014/12/Screen-Shot-2015-02-01-at-11.14.40.png"
"01/06/2015 17:01:42","https://handbrake.fr/","handbrake video conversion","handbrake-video-conversion","http://www.weteling.com/wp/wp-content/uploads/2015/01/handbrake.png"
"02/01/2015 10:56:06","So i wanted to play with Ansible for a while now. Ansible is a pretty neat way to configure servers in a idempotent way. You create a DSL called a Playbook in YAML, this playbook can contain roles for certain parts that you want to implement ( lets say a nginx role ) this role will install nginx, put the correct files in the sites-available and create symlinks in the sites-enabled dir. The realy cool thing about Ansible, is that its idempotent. So you can run your playbook again and again without braking stuff on the server.

http://www.ansible.com/

This really changed the way i configure servers, now i NEVER change something on my server by hand ( only when troubleshooting on a vagrant box to test ansible maybe ). You only change the playbook and run it again! Searching for the right commands is something from the past, ""weird scheit"" on the server is also a thing of the past. And here comes the fun part. You can run the Playbook over N servers at the same time, updating / installing whatever on a complete cluster. LOVING THIS. And maybe the best part.... for developers you can create an exact replica of your production environment on your mac, by running the playbook against a Vagrant box.

This site now runs on a server that's provisioned with Ansible. The backup's of the hoster are turned off... why? The whole server was up and running in 2 minutes thanks to the sheer speed of Ansible. And my server backups my DB and files to a S3 bucket every night. So my backups are now even hosting independent and on a redundant cluster. Cant get any better right?","Ansible","ansible","http://www.weteling.com/wp/wp-content/uploads/2015/01/AnsibleLogo_transparent_web.png"
"02/01/2015 11:33:32","So i was fed-up with the the performance of my shared hosting provider and decided to fix a VPS at Digitalocean. As you could have read I've started to play with Ansible. And i thought, what would be the fasted possible way to run a WordPress installation. So i started digging, and found out that HHVM now supports WordPress!! YaY!!

So i created an Ansible role to install HHVM on my VPS, without any bit irritations of config troubles i got it to work. And how blazing fast it goes. The only problem with HHVM is that its a JIT Compiler ( just in time ) meaning the full power of HHVM is whiteness'ed not in the first request but in the request's after that. Although the first page request is still faster than php-fpm running @ php5.6, same goes for my hhvm btw, running on php 5.6.

And i must say its an absolute joy to be working with Wordpress again. Ive always liked the interface and the simple way its set up. Only the speed. It was such a slow annoying cms! It really took the fun out. But now! Now my first rendered pages load in 80 ms, the second time it drops to about 60 ms and with cashing.... well with cashing im able to get the home page from the server in 12 ms. Thats insanely fast!

Giving that nobody reads my blog ( yet ) and the server has enterprise SSD disks and probably all code is run out of memory. Its still freaking fast! Also the data centre ( Digitalocean amsterdam 3 ) is pretty fast. That also helps!

So overall im pretty pleased! Next step in optimizing Wordpress would be a MongoDB adapter i guess. But the WP backend is not that keen on Mongo i think.","HipHop VM","hiphop-vm","http://www.weteling.com/wp/wp-content/uploads/2015/02/10015657_10152273125169326_256717046_n.png"
"03/05/2015 08:17:18","Just replace RENE with your preference!

And yeah... its set to the english language, so if you need it in mongolian, change the en(glish) :)

find -E /Applications/Xcode.app -iregex '.*/en(glish)?.lproj/SpringBoard.strings' -exec sudo /usr/libexec/PlistBuddy -c 'Set :SIMULATOR_CARRIER_STRING RENE' {} \;","Change your carriername in the iOS simulator","change-your-carriername-in-the-ios-simulator","http://www.weteling.com/wp/wp-content/uploads/2015/03/carrier1.jpg"
"04/08/2015 20:29:05","Just some basic principles that every MVC using programmers should master. STI, Single table inheritance. I have been working on a large Laravel 4.2 project and as fighting with my user model. They contained functions that are for master users and also for slave users. Why should a slave model have a function, whipSlave ... thats just not logical.

So i remembered a principle from my Doctrine years, and rediscovered it in my late Rails adventures. And that is STI. Its such a treat! Only its not available in Laravel 4. So with some small adjustments ive inserted this functionality in Eloquent ( Laravel's orm ) its quite simple actually just overwrite your baseModels

<a href=""http://www.weteling.com/wp/wp-content/uploads/2015/04/Screen-Shot-2015-04-08-at-17.40.04.png""><img class=""alignnone size-full wp-image-260"" src=""http://www.weteling.com/wp/wp-content/uploads/2015/04/Screen-Shot-2015-04-08-at-17.40.04.png"" alt=""Screen Shot 2015-04-08 at 17.40.04"" width=""698"" height=""211"" /></a>

than just make sure your model has a model field, you can set the default ones though the private $attributes array.

now the next time you want to fetch user#2 wich is a slave get_class( User::find(1)  ) will return ""slave""

Nice one!","Single Table Inheritance ( STI )","single-table-inheritance-sti","http://www.weteling.com/wp/wp-content/uploads/2015/04/single-inheritance.png"
"04/10/2015 22:41:08","Its so important to be in the ""zone""! Programming is such a creative environment. There are so much variables in turning something shitty into something great. And sometomes your just not in the zone, and everything out of your fingers is just ready for refactoring.

Do you self a favor, watch a movie, do your taxes but stay F!@# away from you keyboard!","Being in the ""zone""","being-in-the-zone","http://www.weteling.com/wp/wp-content/uploads/2015/04/photodune-2630725-blured-text-on-vintage-paper-with-focus-on-focus-xs.jpg"
"04/26/2015 17:02:35","So the time has come that your fed up with the response times of Heroku, the slow deploy method etc. Although the deploy method rocks, the speed has allot to wish for.

So i started looking into capistrano and mina. Both seem to have the same idea about deployment. You start by creating a complete working environment in a separate location. Once that is a success you create a symlink to this location and you have upgraded. When exactly the migrations are executed i don't know. But thats a small item to overcome. Personally i think you may never create a migration that can break the previous version of your app. So in my case its not even relevant.

But back to mina, i'ts so nice to setup, its so straight forward and simple. I like it allot. So if your planning to create some deploy script... DON'T!!! don't do stuff that other people have thought about more than you have time for.

My next hurdle is setting up my complete server environment with Ansible ( already done, but started hacking in my server for Mina ) and getting Mina up and running in just one command :)","Mina ( rails deployment )","mina-rails-deployment","http://www.weteling.com/wp/wp-content/uploads/2015/04/logo.png"
"10/23/2015 10:22:08","So i was annoyed by default Agile tooling. Thins like ""Trello"" and ""Flow"" just dont cut it. I need more workflows, i used to work with jira 6.something, but it was soooo slow. That was a self hosted system by a client. And before that we had an instance in the Atlassian cloud. But once again so slow! So i ignorred jira for a while, until i got fed up again with de default tooling and installed jira on a VPS 2 core 2,4 xeon with 4gb memory and a ssd disk. Still it was a bit slow, than i started looking at the logs and saw i needed to install tomcat native. Ive compiled this for my ubuntu 15.04 box. And it started speeding up, than i allocated 2GB to the JVM heap and we where in business!

Now ive gat a blazing fast

For everyone who wants to do something similar, this is my history export to get the server working.

# install postgress

sudo apt-get update
sudo apt-get install htop
sudo apt-get install tree
sudo apt-get install postgresql postgresql-contrib
su - postgres
psql
create database jira;
create user jira with password 'SOMETHINGRANDOM';
grant all privileges on database jira to jira;

# Swapfile

sudo fallocate -l 4G /swapfile
ls -lh /swapfile
sudo chmod 600 /swapfile
ls -lh /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
sudo nano /etc/fstab
/swapfile none swap sw 0 0
reboot

# ipTables
iptables -A INPUT -i eth0 -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -i eth0 -p tcp --dport 8080 -j ACCEPT
iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080
sudo apt-get install iptables-persistent

# tomcat native + jira
sudo apt-get install libapr1-dev libssl-dev
sudo apt-get install make
sudo apt-get update
sudo apt-get install openjdk-7-jdk

wget https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-software-7.0.0-jira-7.0.0-x32.bin

chmod +x atlassian-jira-software-7.0.0-jira-7.0.0-x32.bin
./atlassian-jira-software-7.0.0-jira-7.0.0-x32.bin

wget http://mirrors.supportex.net/apache/tomcat/tomcat-connectors/native/1.1.33/source/tomcat-native-1.1.33-src.tar.gz
tar -zxvf tomcat-native-1.1.33-src.tar.gz

cd /opt/tomcat-native-1.1.33-src/jni/native/
./configure --with-apr=/usr/bin/apr-1-config --with-java-home=/usr/lib/jvm/java-7-openjdk-amd64 --with-ssl=yes
make &amp;&amp; make install

cp /usr/local/apr/lib/* /usr/lib
cat /opt/atlassian/jira/logs/catalina.out | grep -A 1 ""AprLifecycleListener""","Jira self hosted","jira-self-hosted","http://www.weteling.com/wp/wp-content/uploads/2015/10/jira-100038423-gallery.png"
"11/12/2015 09:09:27","Just such in insightful book. Its no rocket science and it makes a lot of sence. The stupid thing is you don't come to the same conclusions quick enough. Let this book help you!","The lean startup","the-lean-startup","http://www.weteling.com/wp/wp-content/uploads/2015/11/livre-lean-startup.jpg"
"11/12/2015 09:10:56","Its written by a prick, teaching you how to become a prick. But is being a prick such a bad thing? You get shit done, trim the fat, loose the distractions.

Kind of like the guy.","The four hour workweek","the-four-hour-workweek","http://www.weteling.com/wp/wp-content/uploads/2015/11/71DPD5QEZCL._SL1263_.jpg"
"08/20/2016 15:39:25","Every programmer needs to do allot of stuff in the terminal, but where are all the user interfaces, where are the manuals. Well they dont exists in the way that we are used to. In Linux / Unix they have a basic principle and that is: ""Do one thing, and do it well"". So for every function we need a new program. A couple listed in the article below changed my life, especially ""ag"" aka the silver surfer.

Check it out!

<a href=""http://conqueringthecommandline.com/book/frontmatter"">http://conqueringthecommandline.com/book/frontmatter</a>","Basic terminal commands","basic-terminal-commands","http://www.weteling.com/wp/wp-content/uploads/2016/08/cover-web.png"
"03/31/2016 12:55:08","So, just to increase my love for Heroku, they have recently published a sysem called pipelines. This is a sort grouping of multiple dyno's with internal upgrading features. So you can easily upgrade your accept server to production. Very sexy

But what's this???? Automatic dyno creation linked to pull requests....

IM IN HEAVEN!!!","Yeaaaaahhaaaaaaa Heroku pipelines with Pull request dyno's","yeaaaaahhaaaaaaa-heroku-pipelines-with-pull-request-dynos","http://www.weteling.com/wp/wp-content/uploads/2016/03/Ca8l8pYWcAAJw7R.png"
"06/20/2016 11:59:37","No more host maddness, just *.dev to localhost :) its so nice thanks to <a href=""http://asciithoughts.com/"">ASCII Thoughts</a>
<blockquote>
<h1 id=""setting-up-a-wildcard-dns-domain-on-mac-os-x"">Setting up a wildcard <span class=""small-caps"">DNS</span> domain on Mac <span class=""small-caps"">OS</span> X</h1>
There are many ways to develop on a Mac, and many stack to choose from. One common and recurring need however is to access your local websites through a named domain, ie using <code>example.dev</code>. Thankfully, there is a really simple way to do this using <a href=""http://www.thekelleys.org.uk/dnsmasq/doc.html"">Dnsmasq</a> as a local resolver.
<h3 id=""install-dnsmasq"">Install Dnsmasq</h3>
This is straightforward with <a href=""http://brew.sh/"">Homebrew</a>:
<pre><code class=""hljs bash""><span class=""hljs-comment""># Install it</span>
brew install dnsmasq

<span class=""hljs-comment""># Create the etc dir if needed</span>
mkdir -p /usr/<span class=""hljs-built_in"">local</span>/etc

<span class=""hljs-comment""># Create a simple configuration</span>
<span class=""hljs-comment""># This forces the .dev domain to respond with 127.0.0.1</span>
<span class=""hljs-comment""># You can find more information in the default config file:</span>
<span class=""hljs-comment"">#   /usr/local/opt/dnsmasq/dnsmasq.conf.example</span>
<span class=""hljs-built_in"">echo</span> <span class=""hljs-string"">""address=/.dev/127.0.0.1""</span> &gt; /usr/<span class=""hljs-built_in"">local</span>/etc/dnsmasq.conf

<span class=""hljs-comment""># Install the daemon startup file</span>
sudo cp -fv /usr/<span class=""hljs-built_in"">local</span>/opt/dnsmasq/*.plist \
  /Library/LaunchDaemons

<span class=""hljs-comment""># Start the daemon</span>
sudo launchctl load \
  /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist</code></pre>
<h3 id=""configure-mac-os-x"">Configure Mac <span class=""small-caps"">OS</span> X</h3>
All we need to do is tell the resolver to use Dnsmasq for <code>.dev</code> domains:
<pre><code class=""hljs bash""><span class=""hljs-comment""># man 5 resolver</span>
sudo mkdir -p /etc/resolver
sudo sh -c <span class=""hljs-string"">'echo ""nameserver 127.0.0.1"" &gt; /etc/resolver/dev'</span></code></pre>
You can now use any <code>.dev</code> domain and it will always resolve to <code>127.0.0.1</code>:
<pre><code class=""hljs bash"">ping google.com   <span class=""hljs-comment""># this still works</span>
<span class=""hljs-comment""># PING google.com (74.125.239.38): 56 data bytes</span>

ping foo.dev      <span class=""hljs-comment""># you can use any domain</span>
<span class=""hljs-comment""># PING foo.dev (127.0.0.1): 56 data bytes</span>

ping bar.baz.dev  <span class=""hljs-comment""># or subdomain</span>
<span class=""hljs-comment""># PING foo.dev (127.0.0.1): 56 data bytes</span></code></pre>
<h3 id=""conclusion"">Conclusion</h3>
This is very useful in particular for applications that use subdomains as account identifier: you can easily create new accounts on the fly, and never have to worry about your <code>/etc/hosts</code> file again.

Finally, you may also want to look at <a href=""http://pow.cx/"">Pow</a> (and <a href=""https://github.com/rodreegez/powder"">powder</a>). Pow will automatically start your Rails/Rack applications, and provides a <a href=""http://pow.cx/manual.html#section_2.1.4"">port proxying feature</a> for apps written in other languages. Definitely a great alternative.

That’s it for today.

Cheers!</blockquote>
Repost of:

http://asciithoughts.com/posts/2014/02/23/setting-up-a-wildcard-dns-domain-on-mac-os-x/","Setting up a wildcard domain on OSX","setting-up-a-wildcard-domain-on-osx","http://www.weteling.com/wp/wp-content/uploads/2016/06/dnsmasq_ubuntu.png"
"07/14/2016 11:33:16","You don't have to run your Rails app as root to access it on port 80. Instead, run it normally (on port 3000) and forward port 80 packets via iptables...

Linux:
<pre><code class=""prettyprint prettyprinted""><span class=""com""># localhost/loopback</span><span class=""pln"">
sudo iptables </span><span class=""pun"">-</span><span class=""pln"">t nat </span><span class=""pun"">-</span><span class=""pln"">I OUTPUT </span><span class=""pun"">-</span><span class=""pln"">p tcp </span><span class=""pun"">-</span><span class=""pln"">d </span><span class=""lit"">127.0</span><span class=""pun"">.</span><span class=""lit"">0.1</span> <span class=""pun"">--</span><span class=""pln"">dport </span><span class=""lit"">80</span> <span class=""pun"">-</span><span class=""pln"">j REDIRECT </span><span class=""pun"">--</span><span class=""pln"">to</span><span class=""pun"">-</span><span class=""pln"">ports </span><span class=""lit"">3000</span>

<span class=""com""># external</span><span class=""pln"">
sudo iptables </span><span class=""pun"">-</span><span class=""pln"">t nat </span><span class=""pun"">-</span><span class=""pln"">I PREROUTING </span><span class=""pun"">-</span><span class=""pln"">p tcp </span><span class=""pun"">--</span><span class=""pln"">dport </span><span class=""lit"">80</span> <span class=""pun"">-</span><span class=""pln"">j REDIRECT </span><span class=""pun"">--</span><span class=""pln"">to</span><span class=""pun"">-</span><span class=""pln"">ports </span><span class=""lit"">3000</span></code></pre>
Mac OS (This does not work in OSX Yosemite. If anyone knows how to do that, please comment!):
<pre><code class=""prettyprint prettyprinted""><span class=""pln"">sudo ipfw add </span><span class=""lit"">1</span><span class=""pln""> forward </span><span class=""lit"">127.0</span><span class=""pun"">.</span><span class=""lit"">0.1</span><span class=""pun"">,</span><span class=""lit"">3000</span><span class=""pln""> ip </span><span class=""kwd"">from</span><span class=""pln""> any to any </span><span class=""lit"">80</span> <span class=""kwd"">in</span></code></pre>","Route port 3000 to 80, without running as root","route-port-3000-to-80-without-running-as-root","http://www.weteling.com/wp/wp-content/uploads/2016/07/iptables.gif"
"08/12/2016 15:34:54","Just a brilliant talk from Gary Bernhardt, addressing some really soar point in our technical lifecycle.

Check it out!

<a href=""https://www.destroyallsoftware.com/talks/a-whole-new-world"">https://www.destroyallsoftware.com/talks/a-whole-new-world</a>","Just an awesome talk by Gary Bernhardt","just-awesome-talk-gary-bernhardt","http://www.weteling.com/wp/wp-content/uploads/2016/08/Screen-Shot-2016-08-12-at-15.32.55.png"
